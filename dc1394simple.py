# This file was automatically generated by SWIG (http://www.swig.org).
# Version 1.3.31
#
# Don't modify this file, modify the SWIG interface instead.
# This file is compatible with both classic and new-style classes.

import _dc1394simple
import new
new_instancemethod = new.instancemethod
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'PySwigObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError,name

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

import types
try:
    _object = types.ObjectType
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0
del types


class PySwigIterator(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, PySwigIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, PySwigIterator, name)
    def __init__(self): raise AttributeError, "No constructor defined"
    __repr__ = _swig_repr
    __swig_destroy__ = _dc1394simple.delete_PySwigIterator
    __del__ = lambda self : None;
    def value(*args): return _dc1394simple.PySwigIterator_value(*args)
    def incr(*args): return _dc1394simple.PySwigIterator_incr(*args)
    def decr(*args): return _dc1394simple.PySwigIterator_decr(*args)
    def distance(*args): return _dc1394simple.PySwigIterator_distance(*args)
    def equal(*args): return _dc1394simple.PySwigIterator_equal(*args)
    def copy(*args): return _dc1394simple.PySwigIterator_copy(*args)
    def next(*args): return _dc1394simple.PySwigIterator_next(*args)
    def previous(*args): return _dc1394simple.PySwigIterator_previous(*args)
    def advance(*args): return _dc1394simple.PySwigIterator_advance(*args)
    def __eq__(*args): return _dc1394simple.PySwigIterator___eq__(*args)
    def __ne__(*args): return _dc1394simple.PySwigIterator___ne__(*args)
    def __iadd__(*args): return _dc1394simple.PySwigIterator___iadd__(*args)
    def __isub__(*args): return _dc1394simple.PySwigIterator___isub__(*args)
    def __add__(*args): return _dc1394simple.PySwigIterator___add__(*args)
    def __sub__(*args): return _dc1394simple.PySwigIterator___sub__(*args)
    def __iter__(self): return self
PySwigIterator_swigregister = _dc1394simple.PySwigIterator_swigregister
PySwigIterator_swigregister(PySwigIterator)

class vector_uint64(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vector_uint64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vector_uint64, name)
    __repr__ = _swig_repr
    def iterator(*args): return _dc1394simple.vector_uint64_iterator(*args)
    def __iter__(self): return self.iterator()
    def __nonzero__(*args): return _dc1394simple.vector_uint64___nonzero__(*args)
    def __len__(*args): return _dc1394simple.vector_uint64___len__(*args)
    def pop(*args): return _dc1394simple.vector_uint64_pop(*args)
    def __getslice__(*args): return _dc1394simple.vector_uint64___getslice__(*args)
    def __setslice__(*args): return _dc1394simple.vector_uint64___setslice__(*args)
    def __delslice__(*args): return _dc1394simple.vector_uint64___delslice__(*args)
    def __delitem__(*args): return _dc1394simple.vector_uint64___delitem__(*args)
    def __getitem__(*args): return _dc1394simple.vector_uint64___getitem__(*args)
    def __setitem__(*args): return _dc1394simple.vector_uint64___setitem__(*args)
    def append(*args): return _dc1394simple.vector_uint64_append(*args)
    def empty(*args): return _dc1394simple.vector_uint64_empty(*args)
    def size(*args): return _dc1394simple.vector_uint64_size(*args)
    def clear(*args): return _dc1394simple.vector_uint64_clear(*args)
    def swap(*args): return _dc1394simple.vector_uint64_swap(*args)
    def get_allocator(*args): return _dc1394simple.vector_uint64_get_allocator(*args)
    def begin(*args): return _dc1394simple.vector_uint64_begin(*args)
    def end(*args): return _dc1394simple.vector_uint64_end(*args)
    def rbegin(*args): return _dc1394simple.vector_uint64_rbegin(*args)
    def rend(*args): return _dc1394simple.vector_uint64_rend(*args)
    def pop_back(*args): return _dc1394simple.vector_uint64_pop_back(*args)
    def erase(*args): return _dc1394simple.vector_uint64_erase(*args)
    def __init__(self, *args): 
        this = _dc1394simple.new_vector_uint64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(*args): return _dc1394simple.vector_uint64_push_back(*args)
    def front(*args): return _dc1394simple.vector_uint64_front(*args)
    def back(*args): return _dc1394simple.vector_uint64_back(*args)
    def assign(*args): return _dc1394simple.vector_uint64_assign(*args)
    def resize(*args): return _dc1394simple.vector_uint64_resize(*args)
    def insert(*args): return _dc1394simple.vector_uint64_insert(*args)
    def reserve(*args): return _dc1394simple.vector_uint64_reserve(*args)
    def capacity(*args): return _dc1394simple.vector_uint64_capacity(*args)
    __swig_destroy__ = _dc1394simple.delete_vector_uint64
    __del__ = lambda self : None;
vector_uint64_swigregister = _dc1394simple.vector_uint64_swigregister
vector_uint64_swigregister(vector_uint64)

DC1394_ISO_SPEED_100 = _dc1394simple.DC1394_ISO_SPEED_100
DC1394_ISO_SPEED_200 = _dc1394simple.DC1394_ISO_SPEED_200
DC1394_ISO_SPEED_400 = _dc1394simple.DC1394_ISO_SPEED_400
DC1394_ISO_SPEED_800 = _dc1394simple.DC1394_ISO_SPEED_800
DC1394_ISO_SPEED_1600 = _dc1394simple.DC1394_ISO_SPEED_1600
DC1394_ISO_SPEED_3200 = _dc1394simple.DC1394_ISO_SPEED_3200
DC1394_FRAMERATE_1_875 = _dc1394simple.DC1394_FRAMERATE_1_875
DC1394_FRAMERATE_3_75 = _dc1394simple.DC1394_FRAMERATE_3_75
DC1394_FRAMERATE_7_5 = _dc1394simple.DC1394_FRAMERATE_7_5
DC1394_FRAMERATE_15 = _dc1394simple.DC1394_FRAMERATE_15
DC1394_FRAMERATE_30 = _dc1394simple.DC1394_FRAMERATE_30
DC1394_FRAMERATE_60 = _dc1394simple.DC1394_FRAMERATE_60
DC1394_FRAMERATE_120 = _dc1394simple.DC1394_FRAMERATE_120
DC1394_FRAMERATE_240 = _dc1394simple.DC1394_FRAMERATE_240
DC1394_OPERATION_MODE_LEGACY = _dc1394simple.DC1394_OPERATION_MODE_LEGACY
DC1394_OPERATION_MODE_1394B = _dc1394simple.DC1394_OPERATION_MODE_1394B
class dc1394framerates_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dc1394framerates_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dc1394framerates_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["num"] = _dc1394simple.dc1394framerates_t_num_set
    __swig_getmethods__["num"] = _dc1394simple.dc1394framerates_t_num_get
    if _newclass:num = _swig_property(_dc1394simple.dc1394framerates_t_num_get, _dc1394simple.dc1394framerates_t_num_set)
    __swig_setmethods__["framerates"] = _dc1394simple.dc1394framerates_t_framerates_set
    __swig_getmethods__["framerates"] = _dc1394simple.dc1394framerates_t_framerates_get
    if _newclass:framerates = _swig_property(_dc1394simple.dc1394framerates_t_framerates_get, _dc1394simple.dc1394framerates_t_framerates_set)
    def __init__(self, *args): 
        this = _dc1394simple.new_dc1394framerates_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dc1394simple.delete_dc1394framerates_t
    __del__ = lambda self : None;
dc1394framerates_t_swigregister = _dc1394simple.dc1394framerates_t_swigregister
dc1394framerates_t_swigregister(dc1394framerates_t)

class dc1394video_frame_t(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, dc1394video_frame_t, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, dc1394video_frame_t, name)
    __repr__ = _swig_repr
    __swig_setmethods__["image"] = _dc1394simple.dc1394video_frame_t_image_set
    __swig_getmethods__["image"] = _dc1394simple.dc1394video_frame_t_image_get
    if _newclass:image = _swig_property(_dc1394simple.dc1394video_frame_t_image_get, _dc1394simple.dc1394video_frame_t_image_set)
    __swig_setmethods__["size"] = _dc1394simple.dc1394video_frame_t_size_set
    __swig_getmethods__["size"] = _dc1394simple.dc1394video_frame_t_size_get
    if _newclass:size = _swig_property(_dc1394simple.dc1394video_frame_t_size_get, _dc1394simple.dc1394video_frame_t_size_set)
    __swig_setmethods__["position"] = _dc1394simple.dc1394video_frame_t_position_set
    __swig_getmethods__["position"] = _dc1394simple.dc1394video_frame_t_position_get
    if _newclass:position = _swig_property(_dc1394simple.dc1394video_frame_t_position_get, _dc1394simple.dc1394video_frame_t_position_set)
    __swig_setmethods__["color_coding"] = _dc1394simple.dc1394video_frame_t_color_coding_set
    __swig_getmethods__["color_coding"] = _dc1394simple.dc1394video_frame_t_color_coding_get
    if _newclass:color_coding = _swig_property(_dc1394simple.dc1394video_frame_t_color_coding_get, _dc1394simple.dc1394video_frame_t_color_coding_set)
    __swig_setmethods__["color_filter"] = _dc1394simple.dc1394video_frame_t_color_filter_set
    __swig_getmethods__["color_filter"] = _dc1394simple.dc1394video_frame_t_color_filter_get
    if _newclass:color_filter = _swig_property(_dc1394simple.dc1394video_frame_t_color_filter_get, _dc1394simple.dc1394video_frame_t_color_filter_set)
    __swig_setmethods__["yuv_byte_order"] = _dc1394simple.dc1394video_frame_t_yuv_byte_order_set
    __swig_getmethods__["yuv_byte_order"] = _dc1394simple.dc1394video_frame_t_yuv_byte_order_get
    if _newclass:yuv_byte_order = _swig_property(_dc1394simple.dc1394video_frame_t_yuv_byte_order_get, _dc1394simple.dc1394video_frame_t_yuv_byte_order_set)
    __swig_setmethods__["data_depth"] = _dc1394simple.dc1394video_frame_t_data_depth_set
    __swig_getmethods__["data_depth"] = _dc1394simple.dc1394video_frame_t_data_depth_get
    if _newclass:data_depth = _swig_property(_dc1394simple.dc1394video_frame_t_data_depth_get, _dc1394simple.dc1394video_frame_t_data_depth_set)
    __swig_setmethods__["stride"] = _dc1394simple.dc1394video_frame_t_stride_set
    __swig_getmethods__["stride"] = _dc1394simple.dc1394video_frame_t_stride_get
    if _newclass:stride = _swig_property(_dc1394simple.dc1394video_frame_t_stride_get, _dc1394simple.dc1394video_frame_t_stride_set)
    __swig_setmethods__["video_mode"] = _dc1394simple.dc1394video_frame_t_video_mode_set
    __swig_getmethods__["video_mode"] = _dc1394simple.dc1394video_frame_t_video_mode_get
    if _newclass:video_mode = _swig_property(_dc1394simple.dc1394video_frame_t_video_mode_get, _dc1394simple.dc1394video_frame_t_video_mode_set)
    __swig_setmethods__["total_bytes"] = _dc1394simple.dc1394video_frame_t_total_bytes_set
    __swig_getmethods__["total_bytes"] = _dc1394simple.dc1394video_frame_t_total_bytes_get
    if _newclass:total_bytes = _swig_property(_dc1394simple.dc1394video_frame_t_total_bytes_get, _dc1394simple.dc1394video_frame_t_total_bytes_set)
    __swig_setmethods__["image_bytes"] = _dc1394simple.dc1394video_frame_t_image_bytes_set
    __swig_getmethods__["image_bytes"] = _dc1394simple.dc1394video_frame_t_image_bytes_get
    if _newclass:image_bytes = _swig_property(_dc1394simple.dc1394video_frame_t_image_bytes_get, _dc1394simple.dc1394video_frame_t_image_bytes_set)
    __swig_setmethods__["padding_bytes"] = _dc1394simple.dc1394video_frame_t_padding_bytes_set
    __swig_getmethods__["padding_bytes"] = _dc1394simple.dc1394video_frame_t_padding_bytes_get
    if _newclass:padding_bytes = _swig_property(_dc1394simple.dc1394video_frame_t_padding_bytes_get, _dc1394simple.dc1394video_frame_t_padding_bytes_set)
    __swig_setmethods__["packet_size"] = _dc1394simple.dc1394video_frame_t_packet_size_set
    __swig_getmethods__["packet_size"] = _dc1394simple.dc1394video_frame_t_packet_size_get
    if _newclass:packet_size = _swig_property(_dc1394simple.dc1394video_frame_t_packet_size_get, _dc1394simple.dc1394video_frame_t_packet_size_set)
    __swig_setmethods__["packets_per_frame"] = _dc1394simple.dc1394video_frame_t_packets_per_frame_set
    __swig_getmethods__["packets_per_frame"] = _dc1394simple.dc1394video_frame_t_packets_per_frame_get
    if _newclass:packets_per_frame = _swig_property(_dc1394simple.dc1394video_frame_t_packets_per_frame_get, _dc1394simple.dc1394video_frame_t_packets_per_frame_set)
    __swig_setmethods__["timestamp"] = _dc1394simple.dc1394video_frame_t_timestamp_set
    __swig_getmethods__["timestamp"] = _dc1394simple.dc1394video_frame_t_timestamp_get
    if _newclass:timestamp = _swig_property(_dc1394simple.dc1394video_frame_t_timestamp_get, _dc1394simple.dc1394video_frame_t_timestamp_set)
    __swig_setmethods__["frames_behind"] = _dc1394simple.dc1394video_frame_t_frames_behind_set
    __swig_getmethods__["frames_behind"] = _dc1394simple.dc1394video_frame_t_frames_behind_get
    if _newclass:frames_behind = _swig_property(_dc1394simple.dc1394video_frame_t_frames_behind_get, _dc1394simple.dc1394video_frame_t_frames_behind_set)
    __swig_setmethods__["camera"] = _dc1394simple.dc1394video_frame_t_camera_set
    __swig_getmethods__["camera"] = _dc1394simple.dc1394video_frame_t_camera_get
    if _newclass:camera = _swig_property(_dc1394simple.dc1394video_frame_t_camera_get, _dc1394simple.dc1394video_frame_t_camera_set)
    __swig_setmethods__["id"] = _dc1394simple.dc1394video_frame_t_id_set
    __swig_getmethods__["id"] = _dc1394simple.dc1394video_frame_t_id_get
    if _newclass:id = _swig_property(_dc1394simple.dc1394video_frame_t_id_get, _dc1394simple.dc1394video_frame_t_id_set)
    __swig_setmethods__["allocated_image_bytes"] = _dc1394simple.dc1394video_frame_t_allocated_image_bytes_set
    __swig_getmethods__["allocated_image_bytes"] = _dc1394simple.dc1394video_frame_t_allocated_image_bytes_get
    if _newclass:allocated_image_bytes = _swig_property(_dc1394simple.dc1394video_frame_t_allocated_image_bytes_get, _dc1394simple.dc1394video_frame_t_allocated_image_bytes_set)
    __swig_setmethods__["little_endian"] = _dc1394simple.dc1394video_frame_t_little_endian_set
    __swig_getmethods__["little_endian"] = _dc1394simple.dc1394video_frame_t_little_endian_get
    if _newclass:little_endian = _swig_property(_dc1394simple.dc1394video_frame_t_little_endian_get, _dc1394simple.dc1394video_frame_t_little_endian_set)
    __swig_setmethods__["data_in_padding"] = _dc1394simple.dc1394video_frame_t_data_in_padding_set
    __swig_getmethods__["data_in_padding"] = _dc1394simple.dc1394video_frame_t_data_in_padding_get
    if _newclass:data_in_padding = _swig_property(_dc1394simple.dc1394video_frame_t_data_in_padding_get, _dc1394simple.dc1394video_frame_t_data_in_padding_set)
    def get_width(*args): return _dc1394simple.dc1394video_frame_t_get_width(*args)
    def get_height(*args): return _dc1394simple.dc1394video_frame_t_get_height(*args)
    def to_1D_list(*args): return _dc1394simple.dc1394video_frame_t_to_1D_list(*args)
    height = property(get_height)
    width = property(get_width)

    def to_array(self):
        import numpy
        one_d_list = self.to_1D_list()
        arr = numpy.array(one_d_list)            
        arr.shape = (self.get_height(), self.get_width())
        return arr

    array = property(to_array)

    def __init__(self, *args): 
        this = _dc1394simple.new_dc1394video_frame_t(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dc1394simple.delete_dc1394video_frame_t
    __del__ = lambda self : None;
dc1394video_frame_t_swigregister = _dc1394simple.dc1394video_frame_t_swigregister
dc1394video_frame_t_swigregister(dc1394video_frame_t)

dc1394_video_get_supported_modes = _dc1394simple.dc1394_video_get_supported_modes
dc1394_video_get_supported_framerates = _dc1394simple.dc1394_video_get_supported_framerates
dc1394_video_get_framerate = _dc1394simple.dc1394_video_get_framerate
dc1394_video_set_framerate = _dc1394simple.dc1394_video_set_framerate
dc1394_video_get_mode = _dc1394simple.dc1394_video_get_mode
dc1394_video_set_mode = _dc1394simple.dc1394_video_set_mode
dc1394_video_get_operation_mode = _dc1394simple.dc1394_video_get_operation_mode
dc1394_video_set_operation_mode = _dc1394simple.dc1394_video_set_operation_mode
dc1394_video_get_iso_speed = _dc1394simple.dc1394_video_get_iso_speed
dc1394_video_set_iso_speed = _dc1394simple.dc1394_video_set_iso_speed
dc1394_video_get_iso_channel = _dc1394simple.dc1394_video_get_iso_channel
dc1394_video_set_iso_channel = _dc1394simple.dc1394_video_set_iso_channel
dc1394_video_get_data_depth = _dc1394simple.dc1394_video_get_data_depth
dc1394_video_set_transmission = _dc1394simple.dc1394_video_set_transmission
dc1394_video_get_transmission = _dc1394simple.dc1394_video_get_transmission
dc1394_video_set_one_shot = _dc1394simple.dc1394_video_set_one_shot
dc1394_video_get_one_shot = _dc1394simple.dc1394_video_get_one_shot
dc1394_video_set_multi_shot = _dc1394simple.dc1394_video_set_multi_shot
dc1394_video_get_multi_shot = _dc1394simple.dc1394_video_get_multi_shot
dc1394_video_get_bandwidth_usage = _dc1394simple.dc1394_video_get_bandwidth_usage
enumerate_cameras = _dc1394simple.enumerate_cameras
class SimpleCamera(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SimpleCamera, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SimpleCamera, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        this = _dc1394simple.new_SimpleCamera(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _dc1394simple.delete_SimpleCamera
    __del__ = lambda self : None;
    def capture_raw_frame(*args): return _dc1394simple.SimpleCamera_capture_raw_frame(*args)
    def cleanup_and_exit(*args): return _dc1394simple.SimpleCamera_cleanup_and_exit(*args)
    def capture_fake_frame(*args): return _dc1394simple.SimpleCamera_capture_fake_frame(*args)
    def capture_frame(self):
        raw = self.capture_raw_frame()
        
        if raw is None:
            return None
        
        return raw.array


SimpleCamera_swigregister = _dc1394simple.SimpleCamera_swigregister
SimpleCamera_swigregister(SimpleCamera)



